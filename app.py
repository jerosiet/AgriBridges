import os
import uuid
import logging
from flask import Flask, render_template, request, jsonify, make_response

# Import functions from model_utils
try:
    from models.model_utils import (
        en_to_vi_farmer_pipeline,
        farmer_to_scientific, 
        vi_to_farmer,
        farmer_to_sci_en_pipeline,
        transcribe_audio,
        vi_to_farmer_voice,
        farmer_to_scientific_voice
    )
    print("‚úì Successfully imported model functions")
except ImportError as e:
    print(f"‚úó Import error: {e}")

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask app setup
app = Flask(__name__)
app.config["UPLOAD_FOLDER"] = "uploads"
app.config["MAX_CONTENT_LENGTH"] = 16 * 1024 * 1024

# Create upload folder
os.makedirs(app.config["UPLOAD_FOLDER"], exist_ok=True)

# Translation mapping
TRANSLATION_MAP = {
    "en_to_vi_farmer": en_to_vi_farmer_pipeline,
    "farmer_to_sci": farmer_to_scientific_voice,
    "sci_to_farmer": vi_to_farmer_voice,
    "farmer_to_sci_en": farmer_to_sci_en_pipeline
}
from openai import OpenAI
OPENAI_API_KEY = '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'
# ƒê·∫£m b·∫£o c√≥ API key
client = OpenAI(api_key=OPENAI_API_KEY)

def refine_text_with_chatgpt(text):
    """Refine text using ChatGPT API"""
    try:
        prompt = f" B·∫°n l√† m·ªôt chuy√™n gia trong lƒ©nh v·ª±c n√¥ng nghi·ªáp. H√£y d·ª±a v√†o ch√≠nh ng·ªØ c·∫£nh c·ªßa ƒëo·∫°n ƒë·ªÉ t√¨m c√°c t·ª´ ng·ªØ b·ªã vi·∫øt sai do ph√°t √¢m kh√¥ng chu·∫©n. H√ÉY CH·ªàNH S·ª¨A L·∫†I CHO ƒê√öNG C√ÅC T·ª™ NG·ªÆ VI·∫æT SAI ƒê√ì. ƒê·ªìng th·ªùi, vi·∫øt c√°c ch·ªØ s·ªë l·∫°i th√†nh s·ªë (1,2,3,...). C√°c ƒë∆°n v·ªã vi·∫øt l·∫°i v·ªõi d·∫°ng k√Ω hi·ªáu qu·ªëc t·∫ø. L∆ØU √ù: c√°c t·ª´ ƒë∆∞·ª£c n√≥i nh∆∞: tr√™n l√≠t, tr√™n ng√†y,... c·ªßa c√°c ƒë∆°n v·ªã th√¨ v·∫´n gi·ªØ nguy√™n. CH·ªà T√åM T·ª™ SAI V√Ä CH·ªàNH S·ª¨A, KH√îNG THAY ƒê·ªîI VƒÇN N√ìI TRONG ƒêO·∫†N, KH√îNG VI·∫æT L·∫†I C√ÇU. Ch·ªâ tr·∫£ v·ªÅ ƒëo·∫°n vƒÉn sau ch·ªânh s·ª≠a, kh√¥ng n√≥i g√¨ th√™m. N·∫øu ƒëo·∫°n vƒÉn kh√¥ng c√≥ l·ªói ch√≠nh t·∫£ n√†o th√¨ tr·∫£ l·∫°i ƒëo·∫°n vƒÉn g·ªëc, kh√¥ng n√≥i g√¨ th√™m:\n\n{text}"
        
        response = client.chat.completions.create(
            model="gpt-4",  # ho·∫∑c "gpt-4"
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt chuy√™n gia ng√¥n ng·ªØ ti·∫øng Vi·ªát."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=1000
        )
        
        refined_text = response.choices[0].message.content
        return refined_text
    
    except Exception as e:
        logger.error(f"Error refining text: {e}")
        return f"L·ªói khi g·ªçi ChatGPT: {e}"
def process_translation(task, input_text):
    """Process translation based on task"""
    if not input_text or not input_text.strip():
        return "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n."
    
    try:
        translation_func = TRANSLATION_MAP.get(task)
        if not translation_func:
            return f"Nhi·ªám v·ª• kh√¥ng h·ª£p l·ªá: {task}"
        
        result = translation_func(input_text)
        return result if result else "Kh√¥ng th·ªÉ d·ªãch vƒÉn b·∫£n n√†y."
        
    except Exception as e:
        logger.error(f"Translation error for task {task}: {e}")
        return f"L·ªói d·ªãch thu·∫≠t: {e}"

def process_audio_file(audio_file, audio_lang):
    """Save and process audio file"""
    if not audio_file or audio_file.filename == "":
        return "", "Kh√¥ng c√≥ file √¢m thanh."
    
    filename = f"{uuid.uuid4().hex}_{audio_file.filename}"
    filepath = os.path.join(app.config["UPLOAD_FOLDER"], filename)
    
    try:
        audio_file.save(filepath)
        transcribed_text = transcribe_audio(filepath, audio_lang)

        # üåü Th√™m b∆∞·ªõc ch·ªânh s·ª≠a l·∫°i vƒÉn b·∫£n b·∫±ng ChatGPT
        refined_text = refine_text_with_chatgpt(transcribed_text)

        return refined_text, None
    except Exception as e:
        logger.error(f"Audio processing error: {e}")
        return "", f"L·ªói x·ª≠ l√Ω file √¢m thanh: {e}"
    finally:
        if os.path.exists(filepath):
            try:
                os.remove(filepath)
            except Exception as e:
                logger.warning(f"Failed to remove temp file: {e}")

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        try:
            # Get form data
            task = request.form.get("task", "en_to_vi_farmer")
            input_text = request.form.get("input_text", "").strip()
            audio_file = request.files.get("audio_file")
            audio_lang = request.form.get("audio_lang", "vi")
            
            # Process audio if provided
            if audio_file and audio_file.filename:
                transcribed_text, error = process_audio_file(audio_file, audio_lang)
                logger.info(f"[DEBUG] Transcribed text: '{transcribed_text}'")
                if error:
                    return jsonify({
                        'input': '', 'output': error, 'task': task, 'audio_lang': audio_lang
                    }), 400
                input_text = transcribed_text
            
            # Process translation
            if input_text and not input_text.startswith(("L·ªói", "M√¥ h√¨nh")):
                output = process_translation(task, input_text)
            elif input_text.startswith(("L·ªói", "M√¥ h√¨nh")):
                output = input_text
            else:
                output = "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ho·∫∑c ch·ªçn file √¢m thanh."
            
            return jsonify({
                'input': input_text,
                'task': task,
                'output': output,
                'audio_lang': audio_lang
            })
            
        except Exception as e:
            logger.error(f"Request processing error: {e}")
            return jsonify({
                'input': '',
                'output': f'L·ªói server: {str(e)}',
                'task': request.form.get("task", "en_to_vi_farmer"),
                'audio_lang': request.form.get("audio_lang", "vi")
            }), 500
    
    # GET request - render template
    return render_template("index.html", result={
        'input': '', 'output': '', 'task': 'en_to_vi_farmer', 'audio_lang': 'vi'
    })

@app.errorhandler(413)
def too_large(e):
    return jsonify({
        'input': '', 'output': 'File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 16MB.',
        'task': 'en_to_vi_farmer', 'audio_lang': 'vi'
    }), 413

@app.errorhandler(404)
def not_found(e):
    return render_template("index.html", result={
        'input': '', 'output': 'Trang kh√¥ng t·ªìn t·∫°i.', 
        'task': 'en_to_vi_farmer', 'audio_lang': 'vi'
    }), 404

@app.errorhandler(500)
def internal_error(e):
    return jsonify({
        'input': '', 'output': 'L·ªói server n·ªôi b·ªô. Vui l√≤ng th·ª≠ l·∫°i sau.',
        'task': 'en_to_vi_farmer', 'audio_lang': 'vi'
    }), 500

if __name__ == "__main__":
    # Check if models directory exists
    if not os.path.exists("models"):
        print("Warning: models/ directory not found. Creating it...")
        os.makedirs("models", exist_ok=True)
    
    print("Starting AgriBridge application...")
    print(f"Upload folder: {app.config['UPLOAD_FOLDER']}")
    print(f"Max file size: {app.config['MAX_CONTENT_LENGTH'] // (1024*1024)}MB")
    
    app.run(host='0.0.0.0', port=5001, debug=True, use_reloader=False)